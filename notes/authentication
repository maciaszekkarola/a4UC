w SPA oparta na tokenach. Token to specjalny identyfikator ktory umowzliwia uzytkownikowi wykowywanie czynnosci ktore sa dozwolone dopiero po np.zalogowaniu


Żeby użyć opcji z authentication w firebase, najpier musze go zainstalować w projekcie

npm i --save firebase

w app.components
import * as firebase from 'firebase';

 ngOnInit() {
    firebase.initializeApp({
      apiKey: 'AIzaSyDKYK-elJhuzc6bVHyuw78oymnyQnDmG38',
      authDomain: 'udemy-http-7dc3f.firebaseapp.com',
    });
  }


w metodzie initializeApp daję dwie pary wartości z konfiguraji firebase. po zalogownaiu sie, w projekcie=>authentication=> konfiguracja internetowa => 
pobieram apiKey i authDomain

Jeśli się pojawi problem z z polyfill :
npm install promise-polyfill --save-exact

po zalogowaniu użytkownika powinna sie pojawic informacja w dziale autentication

/////////////////////////////////////////////

TOKEN

getToken() {
        firebase.auth().currentUser.getToken()
            .then(
                (token: string) => this.token = token
        );
        return this.token;
    }



potem tej funkcji używam za każdym razem kiedy czynności wymagające authentification (zapisywanie / pobieranie danych z serwera), tak żeby użytkownik mial pelen dostep do funkcji bez koniecznosci potwierdzania swojej tożsamości.


By móc korzystać w tokena należy do dopisać do URL na końcu ......json?auth=${TOKEN}

zapis :
storeRecipes() {
        const token = this.authService.getToken()
        return this.http.put(`${url}recipes.json?auth=${token}`, 
        this.recipeService.getRecipes() );
    }

pobranie danych:
fetchRecipes() {
       const token = this.authService.getToken();
        
        return this.http.get(`${url}recipes.json?auth=${token}`)
            .map(
                (response: Response) => {
                    const recipes: Recipe[] = response.json();
                    for (let recipe of recipes) {
                        if (!recipe['ingredients']) {
                            recipe['ingredients'] = [];
                        }
                    }
                    return recipes;
                }
            )
            .subscribe(
                (recipes: Recipe[]) => {
                    this.recipeService.setRecipes(recipes);
                }
            );
    }

