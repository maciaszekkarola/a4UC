///////////////////////////////////////
REACTIVE FORM 

1.props:
singupForm: FormGroup;
2.import { ReactiveFormsModule } from '@angular/forms';
zammiast FormModule. to jest tylko do templateDrivenForm;

3. w komponencie dodaję:
ngOnInit() {
    this.singupForm = new FormGroup({
      'username': new FormControl(null),
      'email': new FormControl(null),
      'gender': new FormControl('female')
    });
  }

4. w html
<form [formGroup]="signupForm"> 
<input
            type="text"
            id="username"
            formControlName="username"
            class="form-control">


"username" w formControl odnosi się do obiektu signupForm: FormGroup


///////////////////
WALIDACJA

nie odbywa się w html, tylko  ts

import { FormGroup, FormControl, Validators } from '@angular/forms';

ngOnInit() {
    this.signupForm = new FormGroup({
      'username': new FormControl(null, Validators.required),
      'email': new FormControl(null, [Validators.required, Validators.email]),
      'gender': new FormControl('female')
    });
  }


//////////////////////////////////////
WIADOMOSC POD INPUTEM Z VALIDACJA

<span 
          *ngIf="!signupForm.get('username').valid && signupForm.get('username').touched" 
          class ="help-block">
          Please enter valid username!
        </span>


wywołuje sie metodę.get() i pobiera się z obiektu FormGroup wartość która nas interesuje 'username' 

////////////////////////////

jeśli grupujemy:
ts:
ngOnInit() {
    this.signupForm = new FormGroup({
      'userData': new FormGroup({
        'username': new FormControl(null, Validators.required),
        'email': new FormControl(null, [Validators.required, Validators.email]),
      }),
      'gender': new FormControl('female')
    });
  }


html:

 <div formGroupName="userData">
..........
<span 
                *ngIf="!signupForm.get('userData.username').valid && signupForm.get('userData.username').touched" 
                class ="help-block">
                Please enter valid username!
              </span>



owijający div otrzymuje propsa

ważna jest scieżka w metodzie get(), ponieważ powstaje nowy obiekt w przetrzymujący username to należy go dodać w metodzie
///////////////////////
REAKTYWNE DODAWANIE ELEMENTOW DO FORMULARZA

html:
<div formArrayName="hobbies">
          <div class="form-group">
              <h4>Your Hobbies:</h4>
              <button 
                (click)="onAddHobby()"
                class="btn btn-default" 
                type="button">
                Add Hobby
              </button>
          </div>
          <div class="form-group" 
            *ngFor="let hobbiesControl of signupForm.get('hobbies').controls; let i = index">
              <input 
                type="text" 
                class = "form-control" 
                [formControlName] =  "i"> 
          </div>
        </div>


WAŻNE:
iteruję po tablicy signupForm.get('hobbies').controls, i dodatkowo pobieram index zeby moc wysiwetlic te hobby wlasnie po indexie!

w inpucie przez property bonding łączę [formControlName] =  "i"


ts:
ngOnInit() {
    this.signupForm = new FormGroup({
      'userData': new FormGroup({
        'username': new FormControl(null, Validators.required),
        'email': new FormControl(null, [Validators.required, Validators.email]),
      }),
      'gender': new FormControl('female'),
      'hobbies': new FormArray([])
    });
  }

Imporuję FormArray i tworze formControl który jets tablicą

Potem:
tworze funkcję dodającą hobby

onAddHobby() {
    const control = new FormControl(null, Validators.required);
    (<FormArray>this.signupForm.get('hobbies')).push(control);
  }
///////////////////////////////////////////
WALIDATOR WLASNY
class: 
  forbiddenNames = ['Anna', 'Zosia'];

ngOnInit() {
    this.signupForm = new FormGroup({
      'userData': new FormGroup({
        'username': new FormControl(null, [Validators.required, this.forbiddenValidator.bind(this)]),
        'email': new FormControl(null, [Validators.required, Validators.email]),
      }),
      'gender': new FormControl('female'),
      'hobbies': new FormArray([])
    });
  
// funkcja indexOf jeśli nie znajdzie elementu w tablicy zwraca -1, czyli "true"
  forbiddenValidator(control: FormControl): {[s: string]: boolean} {
    if (this.forbiddenNames.indexOf(control.value) !== -1) {
      return { 'nameisForbidden' : true};
    } else {
      return null;
    }
  }


html: 
JESLI CHCE UMIESCIC INFORMACJE O BLEDZIE W SPANIE

<span 
              *ngIf="!signupForm.get('userData.username').valid && signupForm.get('userData.username').touched" 
              class ="help-block">
                <span 
                *ngIf="signupForm.get('userData.username').errors['nameisForbidden']" 
                class ="help-block">
                This name is invalid!
                </span>
                <span 
                *ngIf="signupForm.get('userData.username').errors['required']" 
                class ="help-block">
                This name is required!
                </span>
            </span>
      
funkcja get()przenosi mnie do miejsca ktore mnie interesuje omijając inne pola obiektu w miedzyczasie


