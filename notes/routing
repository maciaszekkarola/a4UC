ROUTER

1. app module
import { Routes, RouterModule } from '@angular/router';

const appRoutes: Routes = [
{ path: 'users', component: UsersComponent },
{ path: 'users/edit', component: UsersEditComponent } 
]

2. dodać Router module w importach i wywołać funkcję żeby pobierało scieżki z tablicy

RouterModule.forRoot(appRoutes)

3. dodać <router-outlet> w html gdzie ma być outlet

4. dodać :
routerLink = "/" do linka
(albo jeśli aplikacja jest bardziej skomplikowana mozna użyć podejścia tablicowego)
[routerLink]= "['/server']"

routerLinkActive = "active" 
(albo inna klasa która będzie stylować)

5. do linka ze scieżką = "/" dodaję opcję, że moze być uznany za aktywny tylko wtedy kiedy jego scieżka jest dokladnie taka jak wskazuje routerLink

[routerLinkActiveOptions] = "{exact: true}"

/////////////////////////

ROuting programmatically
Po zainstnieniu jakiegoś zdarzenia przekierowuje mnie na inna stronę

w komponencie:
ts:
import {Router}

constructor ( private router: Router)

onLoadServers() {
 this.rourter.navigate('[/servers]')
}


html:

<button (click) = "onLoadServers()"

//////////////////////////
dynamiczny routing

w appRoutes, appModule

{path: 'users/:id, component: UserComponent}

po recznym dopisaniu do sciezki po users/ czegokolwiek pojawi się komponeny UserComponent

//////////////////
będąc w tym samym komponenci eniemozemy odswieżyć widoku używając funkcji snapshot.param.
trzeba użyć subskrypcji

// super ważne!!! to podejści sprawia że dane updateuja sie będa w tym samym komponencie!
    
this.route.params.subscribe(
      (params: Params) => {
        this.user.id = params['idRoute'];
        this.user.name = params['nameRoute'];
        
      }
    )


przy używaniu susbkrypcji trzeba pamiętać o zabijaniu ich przy onDestroy!!!!


ngOnDestroy() {
    this.paramsSubscription.unsubscribe();
  }


///////////////

<a
	[routerLink] = "['/servers', 5, 'edit']"
        [queryParams] = "{allowEdit: '1'}"
        fragment = "loading"
></a>

///////////////////////////////////
ROUTER NESTING

w appRoutes:
const appRoutes: Routes = [
  {path: '', component: HomeComponent},
  {path: 'users', component: UsersComponent, children: [
    {path: ':idRoute/:nameRoute', component: UserComponent},
  ]},
  {path: 'servers', component: ServersComponent, children: [
    {path: ':id', component: ServerComponent},
    {path: ':id/edit', component: EditServerComponent},
  ]},
];

w html w komponencie Rodzica w miejsce renderowania dzieci daję po prostu <router-outlet>

///////////////////// 
WILD CARD 404
 
w appRoutes dodaję scieżkę która pokrywa wszystkie możliwe błędne scieżki
MUSI BYĆ ONA OSTATNIA w array bo plik kompiluje się od dołu do góry, więc jeśli 404 będzie piewsza w liście (a kompilowana jako ostatnia), to każda kolejna scieżka będzie "nadpisana"

 {path: 'not-found', component: PageNotFoundComponent},
 {path: '**', redirectTo: '/not-found'}



/////////////////

app-routing-module.ts

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { PageNotFoundComponent } from './page-not-found/page-not-found.component';


const appRoutes: Routes = [
    {path: 'not-found', component: PageNotFoundComponent},
    {path: '**', redirectTo: '/not-found'},
  ];
  
@NgModule({
  imports: [
    RouterModule.forRoot(appRoutes)
  ],
  exports: [RouterModule]
})


export class AppRoutingModule {

}


w app.module.ts
import { AppRoutingModule } from .....
 
w importach w NgModule: [
AppRoutingModule, 

//////////////////////

